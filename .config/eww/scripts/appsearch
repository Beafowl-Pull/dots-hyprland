#!/usr/bin/bash

IFS=$'\n'
entrynames=( $(cat 'scripts/cache/entrynames.txt' | fzf --filter="$1" | head -n 10) )
entries=( $(cat 'scripts/cache/entries.txt') )

geticonof() {
  clientclass=''
  clientclass=$1
  iconpath=''
  # Get app icon
  if [ -f "scripts/cache/$clientclass" ]; then
      iconpath=$(cat scripts/cache/$clientclass)
      if [ ! -f "${iconpath}" ]; then # Cache refresh if icon doesnt exist
          iconpath=$(geticons "$clientclass" | head -n 1)
          echo "${iconpath}" > "scripts/cache/$clientclass"
      fi
  else
      iconpath=$(geticons "$clientclass" | head -n 1)
      echo "${iconpath}" > "scripts/cache/$clientclass"
  fi
  if [[ ${iconpath} == "" ]]; then
    # Retry with lowercase if icon not found
    iconpath=$(geticons $(echo "$clientclass" | tr '[:upper:]' '[:lower:]' | sed 's/\ /-/g') | head -n 1)

    if [[ ! ${iconpath} = "" ]]; then
      rm "scripts/cache/$clientclass"
      echo "${iconpath}" > "scripts/cache/$clientclass"
    else 
      newname=$(scripts/iconpatch $clientclass)
      iconpath=$(geticons "$newname" | head -n 1)
      if [[ ! ${iconpath} = "" ]]; then
        rm "scripts/cache/$clientclass"
        echo "${iconpath}" > "scripts/cache/$clientclass"
      else
        # Fallback app icon, replace the path below to the fallback icon of your choice
        # iconpath="/usr/share/icons/Win11-dark/mimes/48/application-x-executable.svg"
        iconpath=$(geticons "application-x-executable" | head -n 1)
        rm "scripts/cache/$clientclass"
        echo "${iconpath}" > "scripts/cache/$clientclass"
      fi
    fi
  fi
  echo "$iconpath"
}

quiteSureNotMath() {
  if [[ ${1:0:1} != "0" \
  && ${1:0:1} != "1" \
  && ${1:0:1} != "2" \
  && ${1:0:1} != "3" \
  && ${1:0:1} != "4" \
  && ${1:0:1} != "5" \
  && ${1:0:1} != "6" \
  && ${1:0:1} != "7" \
  && ${1:0:1} != "8" \
  && ${1:0:1} != "9" \
  && ${1:0:1} != "(" \
  && ${1:0:1} != ")" \
  ]]; then
    echo 'true'
  else
    echo 'false'
  fi
}

if [[ "$1" == ">"* ]]; then
  cd ~/.config/eww 
  if [[ "$1" == ">load"* ]]; then
    searching=$(echo "$1" | sed 's/>load //g'  | sed 's/>load//g')
    profilenames=( $(ls css/savedcolors/ | grep .txt | sed 's/_iconcolor_//g' | sed 's/.txt//g' | fzf --filter="$searching") )
    echo -n '['
    for x in "${!profilenames[@]}"; do
      if [ "$x" != "0" ]; then
        printf ','
      fi
      echo -n '{"name": "'"${profilenames[x]}"'", "exec": ">load '"${profilenames[x]}"'"}'
    done
    echo -n ']'
  else
    echo '[]'
  fi
  exit 0
fi

if [[ "${!entrynames[@]}" == "" && $(quiteSureNotMath "$1") == "false" ]]; then
  mathAns=$(qalc $1 | head -n 1)
  mathAns="${mathAns#*= }"
  mathAns="${mathAns#*â‰ˆ }"
  if [[ "$mathAns" == *"error"* ]]; then
    echo '[]'
    exit 0
  else
    echo '[{"name": "'"$mathAns"'", "exec": "wl-copy \"'"$mathAns"'\""}]'
  fi
  exit 0
fi

printf '['

for x in "${!entrynames[@]}"; do
  if [ "$x" != "0" ]; then
    printf ','
  fi
  appjson=$(echo $entries | gojq -c -M '."'"${entrynames[x]}"'"')
  # iconname=$(echo "$appjson" | gojq -r -c -M '.icon')
  # appjson=$(echo "$appjson" | gojq '.icon = "'$(geticonof "$iconname")'"')
  echo -n "$appjson"
done

printf ']'